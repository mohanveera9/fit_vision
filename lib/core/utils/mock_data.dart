import '../../shared/models/user_model.dart';
import '../../shared/models/test_result_model.dart';
import '../../shared/models/leaderboard_model.dart';

class MockData {
  // Mock Users
  static final List<UserModel> mockUsers = [
    UserModel(
      id: '1',
      name: 'Priya Sharma',
      email: 'priya.sharma@email.com',
      phoneNumber: '+91 98765 43210',
      age: 24,
      gender: 'Male',
      league: 'Youth',
      memberSince: DateTime.now().subtract(const Duration(days: 30)),
      profileImageUrl: 'https://i.pravatar.cc/150?img=1',
      aadhaarNumber: '1234-5678-9012',
      isVerified: true,
      height: 175.0,
      weight: 70.0,
    ),
    UserModel(
      id: '2',
      name: 'Arjun Singh',
      email: 'arjun.singh@email.com',
      phoneNumber: '+91 98765 43211',
      age: 19,
      gender: 'Female',
      league: 'Youth',
      memberSince: DateTime.now().subtract(const Duration(days: 15)),
      profileImageUrl: 'https://i.pravatar.cc/150?img=2',
      aadhaarNumber: '1234-5678-9013',
      isVerified: true,
      height: 165.0,
      weight: 58.0,
    ),
    UserModel(
      id: '3',
      name: 'Raj Patel',
      email: 'raj.patel@email.com',
      phoneNumber: '+91 98765 43212',
      age: 19,
      gender: 'Male',
      league: 'Youth',
      memberSince: DateTime.now().subtract(const Duration(days: 45)),
      profileImageUrl: 'https://i.pravatar.cc/150?img=3',
      aadhaarNumber: '1234-5678-9014',
      isVerified: true,
      height: 170.0,
      weight: 65.0,
    ),
  ];

  // Mock Test Results - Only 4 tests completed (height, weight, shuttle run, flexibility)
  static final List<TestResultModel> mockTestResults = [
    TestResultModel(
      testId: 'height_1',
      testName: 'Height Measurement',
      testType: TestType.height,
      score: 175,
      percentile: 85.5,
      completedAt: DateTime.now().subtract(const Duration(days: 2)),
      status: TestStatus.completed,
      details: {'height': 175, 'unit': 'cm'},
      duration: const Duration(minutes: 2),
    ),
    TestResultModel(
      testId: 'weight_1',
      testName: 'Weight Measurement',
      testType: TestType.weight,
      score: 70,
      percentile: 72.3,
      completedAt: DateTime.now().subtract(const Duration(days: 2)),
      status: TestStatus.completed,
      details: {'weight': 70, 'unit': 'kg'},
      duration: const Duration(minutes: 1),
    ),
    TestResultModel(
      testId: 'shuttlerun_1',
      testName: 'Shuttle Run Test',
      testType: TestType.running,
      score: 82,
      percentile: 82.5,
      completedAt: DateTime.now().subtract(const Duration(days: 1)),
      status: TestStatus.completed,
      details: {'time': 8.2, 'unit': 'seconds'},
      duration: const Duration(minutes: 3),
    ),
    TestResultModel(
      testId: 'flexibility_1',
      testName: 'Flexibility Test',
      testType: TestType.flexibility,
      score: 35,
      percentile: 68.4,
      completedAt: DateTime.now().subtract(const Duration(days: 1)),
      status: TestStatus.completed,
      details: {'reach': 35, 'unit': 'cm'},
      duration: const Duration(minutes: 3),
    ),
    TestResultModel(
      testId: 'pushups_1',
      testName: 'Push-ups Test',
      testType: TestType.pushUps,
      score: 0,
      percentile: 0,
      completedAt: DateTime.now(),
      status: TestStatus.notStarted,
      details: {},
      duration: const Duration(minutes: 2),
    ),
    TestResultModel(
      testId: 'situps_1',
      testName: 'Sit-ups Test',
      testType: TestType.sitUps,
      score: 0,
      percentile: 0,
      completedAt: DateTime.now(),
      status: TestStatus.notStarted,
      details: {},
      duration: const Duration(minutes: 2),
    ),
    TestResultModel(
      testId: 'running_1',
      testName: '1600m Run Test',
      testType: TestType.running,
      score: 0,
      percentile: 0,
      completedAt: DateTime.now(),
      status: TestStatus.notStarted,
      details: {},
      duration: const Duration(minutes: 15),
    ),
    TestResultModel(
      testId: 'plankhold_1',
      testName: 'Plank Hold Test',
      testType: TestType.running,
      score: 0,
      percentile: 0,
      completedAt: DateTime.now(),
      status: TestStatus.notStarted,
      details: {},
      duration: const Duration(minutes: 5),
    ),
    TestResultModel(
      testId: 'standingbroadjump_1',
      testName: 'Standing Broad Jump',
      testType: TestType.running,
      score: 0,
      percentile: 0,
      completedAt: DateTime.now(),
      status: TestStatus.notStarted,
      details: {},
      duration: const Duration(minutes: 3),
    ),
    TestResultModel(
      testId: 'verticaljump_1',
      testName: 'Vertical Jump Test',
      testType: TestType.running,
      score: 0,
      percentile: 0,
      completedAt: DateTime.now(),
      status: TestStatus.notStarted,
      details: {},
      duration: const Duration(minutes: 3),
    ),
  ];

  // Mock Leaderboard Entries - Only completed tests have scores
  static final List<LeaderboardEntry> mockLeaderboardEntries = [
    LeaderboardEntry(
      rank: 1,
      userId: '1',
      userName: 'Priya Sharma',
      profileImageUrl: 'https://i.pravatar.cc/150?img=1',
      totalScore: 362,
      league: 'Youth',
      age: 24,
      gender: 'Female',
      lastUpdated: DateTime.now().subtract(const Duration(hours: 2)),
      testScores: {
        'height': 175,
        'weight': 70,
        'shuttleRun': 82,
        'flexibility': 35,
      },
    ),
    LeaderboardEntry(
      rank: 2,
      userId: '2',
      userName: 'Sneha Reddy',
      profileImageUrl: 'https://i.pravatar.cc/150?img=2',
      totalScore: 340,
      league: 'Youth',
      age: 19,
      gender: 'Female',
      lastUpdated: DateTime.now().subtract(const Duration(hours: 4)),
      testScores: {
        'height': 165,
        'weight': 58,
        'shuttleRun': 75,
        'flexibility': 42,
      },
    ),
    LeaderboardEntry(
      rank: 3,
      userId: '3',
      userName: 'Krishna Priya',
      profileImageUrl: 'https://i.pravatar.cc/150?img=3',
      totalScore: 295,
      league: 'Youth',
      age: 16,
      gender: 'FeMale',
      lastUpdated: DateTime.now().subtract(const Duration(hours: 6)),
      testScores: {
        'height': 170,
        'weight': 65,
        'shuttleRun': 60,
        'flexibility': 30,
      },
    ),
    LeaderboardEntry(
      rank: 4,
      userId: '4',
      userName: 'Sneha Reddy',
      profileImageUrl: 'https://i.pravatar.cc/150?img=4',
      totalScore: 293,
      league: 'Youth',
      age: 22,
      gender: 'Female',
      lastUpdated: DateTime.now().subtract(const Duration(hours: 8)),
      testScores: {
        'height': 162,
        'weight': 55,
        'shuttleRun': 78,
        'flexibility': 38,
      },
    ),
    LeaderboardEntry(
      rank: 5,
      userId: '5',
      userName: 'Pavani',
      profileImageUrl: 'https://i.pravatar.cc/150?img=5',
      totalScore: 281,
      league: 'Senior',
      age: 28,
      gender: 'FeMale',
      lastUpdated: DateTime.now().subtract(const Duration(hours: 10)),
      testScores: {
        'height': 180,
        'weight': 75,
        'shuttleRun': 58,
        'flexibility': 28,
      },
    ),
  ];

  // Mock Test Definitions - 10 tests with height and weight invisible
  static final List<Map<String, dynamic>> mockTestDefinitions = [
    {
      'id': 'height',
      'name': 'Height Measurement',
      'description': 'Measure your height using camera technology',
      'icon': 'üìè',
      'instructions': [
        'Stand straight against a wall',
        'Position camera at eye level',
        'Ensure good lighting',
        'Follow on-screen guidance',
      ],
      'duration': '2 minutes',
      'difficulty': 'Easy',
      'isVisible': false,
    },
    {
      'id': 'weight',
      'name': 'Weight Measurement',
      'description': 'Enter your current weight',
      'icon': '‚öñ',
      'instructions': [
        'Use a digital scale if possible',
        'Weigh yourself without shoes',
        'Enter accurate weight',
        'Include decimal places',
      ],
      'duration': '1 minute',
      'difficulty': 'Easy',
      'isVisible': false,
    },
    {
      'id': 'pushups',
      'name': 'Push-ups Test',
      'description': 'Complete as many push-ups as possible in 60 seconds',
      'icon': 'üí™',
      'instructions': [
        'Start in plank position',
        'Lower chest to ground',
        'Push back up completely',
        'Maintain proper form',
      ],
      'duration': '2 minutes',
      'difficulty': 'Medium',
      'isVisible': true,
    },
    {
      'id': 'situps',
      'name': 'Sit-ups Test',
      'description': 'Complete as many sit-ups as possible in 60 seconds',
      'icon': 'üî•',
      'instructions': [
        'Lie on back with knees bent',
        'Place hands behind head',
        'Lift shoulders off ground',
        'Return to starting position',
      ],
      'duration': '2 minutes',
      'difficulty': 'Medium',
      'isVisible': true,
    },
    {
      'id': 'shuttlerun',
      'name': 'Shuttle Run Test',
      'description': 'Measure your speed and agility by running back and forth',
      'icon': 'üîÑ',
      'instructions': [
        'Place two markers 20 meters apart',
        'Start at one marker and run to the other',
        'Touch the line with your hand/foot',
        'Run back and complete the circuit',
      ],
      'duration': '3 minutes',
      'difficulty': 'Medium',
      'isVisible': true,
    },
    {
      'id': 'flexibility',
      'name': 'Flexibility Test',
      'description': 'Measure your flexibility with sit-and-reach test',
      'icon': 'ü§∏‚Äç‚ôÄ',
      'instructions': [
        'Sit with legs straight',
        'Reach forward as far as possible',
        'Hold position for 2 seconds',
        'Measure the reach distance',
      ],
      'duration': '3 minutes',
      'difficulty': 'Easy',
      'isVisible': true,
    },
    {
      'id': 'running',
      'name': '1600m Run Test',
      'description': 'Complete 1600 meters as fast as possible',
      'icon': 'üèÉ‚Äç‚ôÇ',
      'instructions': [
        'Warm up before starting',
        'Run at steady pace',
        'Complete 4 laps of 400m track',
        'Record your final time',
      ],
      'duration': '15 minutes',
      'difficulty': 'Hard',
      'isVisible': true,
    },
    {
      'id': 'plankhold',
      'name': 'Plank Hold Test',
      'description': 'Hold plank position for as long as possible',
      'icon': '‚è±',
      'instructions': [
        'Start in forearm plank position',
        'Keep body straight',
        'Hold position as long as possible',
        'Stop when form breaks',
      ],
      'duration': '5 minutes',
      'difficulty': 'Medium',
      'isVisible': true,
    },
    {
      'id': 'standingbroadjump',
      'name': 'Standing Broad Jump',
      'description': 'Jump as far as possible from standing position',
      'icon': 'ü¶ò',
      'instructions': [
        'Stand with feet shoulder-width apart',
        'Swing arms back and jump forward',
        'Land with both feet',
        'Measure distance from start line',
      ],
      'duration': '3 minutes',
      'difficulty': 'Medium',
      'isVisible': true,
    },
    {
      'id': 'verticaljump',
      'name': 'Vertical Jump Test',
      'description': 'Jump as high as possible from standing position',
      'icon': '‚¨Ü',
      'instructions': [
        'Stand next to measuring wall',
        'Mark your reach height',
        'Jump as high as possible',
        'Mark highest point touched',
      ],
      'duration': '3 minutes',
      'difficulty': 'Medium',
      'isVisible': true,
    },
  ];

  // Mock Achievements
  static final List<Map<String, dynamic>> mockAchievements = [
    {
      'id': 'first_test',
      'title': 'First Steps',
      'description': 'Complete your first fitness test',
      'icon': 'üéØ',
      'unlocked': true,
      'unlockedAt': DateTime.now().subtract(const Duration(days: 2)),
    },
    {
      'id': 'height_master',
      'title': 'Height Master',
      'description': 'Achieve 90th percentile in height test',
      'icon': 'üìè',
      'unlocked': false,
      'unlockedAt': null,
    },
    {
      'id': 'pushup_warrior',
      'title': 'Push-up Warrior',
      'description': 'Complete 40+ push-ups in 60 seconds',
      'icon': 'üí™',
      'unlocked': false,
      'unlockedAt': null,
    },
    {
      'id': 'consistency',
      'title': 'Consistency Champion',
      'description': 'Complete tests for 7 consecutive days',
      'icon': 'üî•',
      'unlocked': false,
      'unlockedAt': null,
    },
    {
      'id': 'speed_demon',
      'title': 'Speed Demon',
      'description': 'Complete shuttle run in under 8.5 seconds',
      'icon': '‚ö°',
      'unlocked': false,
      'unlockedAt': null,
    },
    {
      'id': 'flexibility_master',
      'title': 'Flexibility Master',
      'description': 'Achieve excellent flexibility score',
      'icon': 'ü§∏‚Äç‚ôÄ',
      'unlocked': false,
      'unlockedAt': null,
    },
    {
      'id': 'endurance_king',
      'title': 'Endurance King',
      'description': 'Complete 1600m run in under 7 minutes',
      'icon': 'üèÉ‚Äç‚ôÇ',
      'unlocked': false,
      'unlockedAt': null,
    },
    {
      'id': 'plank_master',
      'title': 'Plank Master',
      'description': 'Hold plank for more than 3 minutes',
      'icon': '‚è±',
      'unlocked': false,
      'unlockedAt': null,
    },
  ];

  // Mock Videos
  static final List<Map<String, dynamic>> mockVideos = [
    {
      'id': '1',
      'title': 'Proper Push-up Technique',
      'description': 'Learn the correct form for push-ups',
      'thumbnailUrl': 'https://picsum.photos/300/200?random=1',
      'duration': '5:30',
      'category': 'Tutorial',
      'uploadedAt': DateTime.now().subtract(const Duration(days: 7)),
    },
    {
      'id': '2',
      'title': 'Flexibility Exercises',
      'description': 'Improve your flexibility with these exercises',
      'thumbnailUrl': 'https://picsum.photos/300/200?random=2',
      'duration': '8:15',
      'category': 'Exercise',
      'uploadedAt': DateTime.now().subtract(const Duration(days: 5)),
    },
    {
      'id': '3',
      'title': 'Running Form Tips',
      'description': 'Optimize your running technique',
      'thumbnailUrl': 'https://picsum.photos/300/200?random=3',
      'duration': '6:45',
      'category': 'Tutorial',
      'uploadedAt': DateTime.now().subtract(const Duration(days: 3)),
    },
    {
      'id': '4',
      'title': 'Shuttle Run Training',
      'description': 'Improve your shuttle run performance',
      'thumbnailUrl': 'https://picsum.photos/300/200?random=4',
      'duration': '7:20',
      'category': 'Training',
      'uploadedAt': DateTime.now().subtract(const Duration(days: 4)),
    },
    {
      'id': '5',
      'title': 'Perfect Plank Form',
      'description': 'Master the plank exercise',
      'thumbnailUrl': 'https://picsum.photos/300/200?random=5',
      'duration': '4:45',
      'category': 'Tutorial',
      'uploadedAt': DateTime.now().subtract(const Duration(days: 2)),
    },
  ];
}
